{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\user\\\\Desktop\\\\React2022\\\\Form.InputValidations.HandlingInputs\\\\src\\\\components\\\\SimpleInput.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useRef, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SimpleInput = props => {\n  _s();\n\n  const nameInputRef = useRef();\n  const [enteredName, setEnteredName] = useState(\"\");\n  const [enteredNameIsValid, setEnteredNameIsValid] = useState(false);\n  const [enteredNameTouched, setEnteredNameTouched] = useState(false);\n  useEffect(() => {\n    if (enteredNameIsValid) {\n      console.log('Name Input is valid!');\n    }\n  }, [enteredNameIsValid]);\n\n  const nameInputChangeHandler = e => {\n    setEnteredName(e.target.value);\n\n    if (enteredName.trim().length > 0) {\n      setEnteredNameTouched(false);\n    }\n  };\n\n  const nameInputHandler = e => {\n    setEnteredNameTouched(true);\n\n    if (enteredName.trim().length < 0) {\n      setEnteredNameIsValid(false);\n      return;\n    }\n  };\n\n  const formSubmissionHandler = e => {\n    e.preventDefault(); // bunu yazaraq deyirikki http request gonderme servere (cunki biz serverde islemirik) qisasi hecne etme\n\n    setEnteredNameTouched(true);\n\n    if (enteredName.trim() === \"\") {\n      setEnteredNameIsValid(false);\n      return;\n    }\n\n    setEnteredNameIsValid(true);\n    console.log(enteredName);\n    setEnteredName(\"\");\n  };\n\n  const nameInputIsInValid = !enteredNameIsValid && enteredNameTouched;\n  const nameInputClasses = nameInputIsInValid ? \"form-control invalid\" : \"form-control\";\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: formSubmissionHandler,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: nameInputClasses,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"name\",\n        children: \"Your Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        ref: nameInputRef,\n        type: \"text\",\n        id: \"name\",\n        onChange: nameInputChangeHandler,\n        onBlur: nameInputHandler // onFocus={focusInputHandler}\n        ,\n        value: enteredName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this), nameInputIsInValid && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"error-text\",\n      children: \"Name must not be empty.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-actions\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 5\n  }, this);\n};\n\n_s(SimpleInput, \"bm/27lsNsiIXuRMukf2inprCLH4=\");\n\n_c = SimpleInput;\nexport default SimpleInput; // const enteredValue = nameInputRef.current.value;\n// console.log(enteredValue);\n\nvar _c;\n\n$RefreshReg$(_c, \"SimpleInput\");","map":{"version":3,"names":["useState","useRef","useEffect","SimpleInput","props","nameInputRef","enteredName","setEnteredName","enteredNameIsValid","setEnteredNameIsValid","enteredNameTouched","setEnteredNameTouched","console","log","nameInputChangeHandler","e","target","value","trim","length","nameInputHandler","formSubmissionHandler","preventDefault","nameInputIsInValid","nameInputClasses"],"sources":["C:/Users/user/Desktop/React2022/Form.InputValidations.HandlingInputs/src/components/SimpleInput.js"],"sourcesContent":["import { useState, useRef,useEffect } from \"react\";\n\nconst SimpleInput = (props) => {\n  const nameInputRef = useRef();\n  const [enteredName, setEnteredName] = useState(\"\");\n  const [enteredNameIsValid, setEnteredNameIsValid] = useState(false);\n  const [enteredNameTouched, setEnteredNameTouched] = useState(false);\n\n  useEffect(() => {\n    if(enteredNameIsValid){\n      console.log('Name Input is valid!')\n    }\n  },[enteredNameIsValid])\n\n  const nameInputChangeHandler = (e) => {\n    setEnteredName(e.target.value);\n    if(enteredName.trim().length > 0) {\n      setEnteredNameTouched(false);\n    }\n  };\n\n  const nameInputHandler = e => {\n    setEnteredNameTouched(true);\n\n    if (enteredName.trim().length < 0) {\n      setEnteredNameIsValid(false);\n      return;\n    }\n  };\n\n  const formSubmissionHandler = (e) => {\n    e.preventDefault(); // bunu yazaraq deyirikki http request gonderme servere (cunki biz serverde islemirik) qisasi hecne etme\n    setEnteredNameTouched(true);\n\n    if (enteredName.trim() === \"\") {\n      setEnteredNameIsValid(false);\n      return;\n    }\n    setEnteredNameIsValid(true);\n    console.log(enteredName);\n    setEnteredName(\"\");\n  };\n\n  const nameInputIsInValid = !enteredNameIsValid && enteredNameTouched;\n\n  const nameInputClasses = nameInputIsInValid\n    ? \"form-control invalid\"\n    : \"form-control\";\n\n  return (\n    <form onSubmit={formSubmissionHandler}>\n      <div className={nameInputClasses}>\n        <label htmlFor=\"name\">Your Name</label>\n        <input\n          ref={nameInputRef}\n          type=\"text\"\n          id=\"name\"\n          onChange={nameInputChangeHandler}\n          onBlur={nameInputHandler}\n          // onFocus={focusInputHandler}\n          value={enteredName}\n        />\n      </div>\n      {nameInputIsInValid && (\n        <p className=\"error-text\">Name must not be empty.</p>\n      )}\n      <div className=\"form-actions\">\n        <button>Submit</button>\n      </div>\n    </form>\n  );\n};\n\nexport default SimpleInput;\n\n\n    // const enteredValue = nameInputRef.current.value;\n    // console.log(enteredValue);"],"mappings":";;;AAAA,SAASA,QAAT,EAAmBC,MAAnB,EAA0BC,SAA1B,QAA2C,OAA3C;;;AAEA,MAAMC,WAAW,GAAIC,KAAD,IAAW;EAAA;;EAC7B,MAAMC,YAAY,GAAGJ,MAAM,EAA3B;EACA,MAAM,CAACK,WAAD,EAAcC,cAAd,IAAgCP,QAAQ,CAAC,EAAD,CAA9C;EACA,MAAM,CAACQ,kBAAD,EAAqBC,qBAArB,IAA8CT,QAAQ,CAAC,KAAD,CAA5D;EACA,MAAM,CAACU,kBAAD,EAAqBC,qBAArB,IAA8CX,QAAQ,CAAC,KAAD,CAA5D;EAEAE,SAAS,CAAC,MAAM;IACd,IAAGM,kBAAH,EAAsB;MACpBI,OAAO,CAACC,GAAR,CAAY,sBAAZ;IACD;EACF,CAJQ,EAIP,CAACL,kBAAD,CAJO,CAAT;;EAMA,MAAMM,sBAAsB,GAAIC,CAAD,IAAO;IACpCR,cAAc,CAACQ,CAAC,CAACC,MAAF,CAASC,KAAV,CAAd;;IACA,IAAGX,WAAW,CAACY,IAAZ,GAAmBC,MAAnB,GAA4B,CAA/B,EAAkC;MAChCR,qBAAqB,CAAC,KAAD,CAArB;IACD;EACF,CALD;;EAOA,MAAMS,gBAAgB,GAAGL,CAAC,IAAI;IAC5BJ,qBAAqB,CAAC,IAAD,CAArB;;IAEA,IAAIL,WAAW,CAACY,IAAZ,GAAmBC,MAAnB,GAA4B,CAAhC,EAAmC;MACjCV,qBAAqB,CAAC,KAAD,CAArB;MACA;IACD;EACF,CAPD;;EASA,MAAMY,qBAAqB,GAAIN,CAAD,IAAO;IACnCA,CAAC,CAACO,cAAF,GADmC,CACf;;IACpBX,qBAAqB,CAAC,IAAD,CAArB;;IAEA,IAAIL,WAAW,CAACY,IAAZ,OAAuB,EAA3B,EAA+B;MAC7BT,qBAAqB,CAAC,KAAD,CAArB;MACA;IACD;;IACDA,qBAAqB,CAAC,IAAD,CAArB;IACAG,OAAO,CAACC,GAAR,CAAYP,WAAZ;IACAC,cAAc,CAAC,EAAD,CAAd;EACD,CAXD;;EAaA,MAAMgB,kBAAkB,GAAG,CAACf,kBAAD,IAAuBE,kBAAlD;EAEA,MAAMc,gBAAgB,GAAGD,kBAAkB,GACvC,sBADuC,GAEvC,cAFJ;EAIA,oBACE;IAAM,QAAQ,EAAEF,qBAAhB;IAAA,wBACE;MAAK,SAAS,EAAEG,gBAAhB;MAAA,wBACE;QAAO,OAAO,EAAC,MAAf;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QADF,eAEE;QACE,GAAG,EAAEnB,YADP;QAEE,IAAI,EAAC,MAFP;QAGE,EAAE,EAAC,MAHL;QAIE,QAAQ,EAAES,sBAJZ;QAKE,MAAM,EAAEM,gBALV,CAME;QANF;QAOE,KAAK,EAAEd;MAPT;QAAA;QAAA;QAAA;MAAA,QAFF;IAAA;MAAA;MAAA;MAAA;IAAA,QADF,EAaGiB,kBAAkB,iBACjB;MAAG,SAAS,EAAC,YAAb;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAdJ,eAgBE;MAAK,SAAS,EAAC,cAAf;MAAA,uBACE;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IADF;MAAA;MAAA;MAAA;IAAA,QAhBF;EAAA;IAAA;IAAA;IAAA;EAAA,QADF;AAsBD,CArED;;GAAMpB,W;;KAAAA,W;AAuEN,eAAeA,WAAf,C,CAGI;AACA"},"metadata":{},"sourceType":"module"}